{"ast":null,"code":"var _jsxFileName = \"/Users/jakoobz/Documents/GitHub/RepVault/frontend/src/components/CircuitForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CircuitForm({\n  addCircuit,\n  darkMode,\n  toggleDarkMode\n}) {\n  _s();\n  const [circuitName, setCircuitName] = useState(\"\"); // Circuit name\n  const [cards, setCards] = useState([]); // Cards containing workouts\n  const [isEditingName, setIsEditingName] = useState(false); // Editing circuit name state\n  const [restTime, setRestTime] = useState(1); // Rest time in minutes\n  const [timer, setTimer] = useState(null); // Timer for rest countdown\n\n  const userId = localStorage.getItem(\"userId\"); // Logged-in user's ID\n\n  // Fetch circuits on component mount\n  useEffect(() => {\n    const fetchCircuits = async () => {\n      if (!userId) return; // Ensure user is logged in\n      try {\n        const response = await fetch(`http://localhost:5000/api/circuits/${userId}`);\n        const data = await response.json();\n        if (response.ok) {\n          // If there are circuits, load the first one\n          if (data.circuits && data.circuits.length > 0) {\n            const lastCircuit = data.circuits[data.circuits.length - 1];\n            setCircuitName(lastCircuit.name || \"name\");\n            setCards(lastCircuit.cards || []);\n            setRestTime(lastCircuit.restTime || 1);\n          }\n        } else {\n          console.error(data.message || \"Failed to fetch circuits\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching circuits:\", error);\n      }\n    };\n    fetchCircuits();\n  }, [userId]);\n\n  // Add a new card with an initial workout\n  const addCard = () => {\n    setCards([...cards, [{\n      name: \"New Workout\",\n      reps: 10,\n      weight: 50,\n      done: false\n    }]]);\n  };\n\n  // Add a new workout to an existing card\n  const addWorkoutToCard = cardIndex => {\n    const updatedCards = [...cards];\n    updatedCards[cardIndex].push({\n      name: \"New Workout\",\n      reps: 10,\n      weight: 50,\n      done: false\n    });\n    setCards(updatedCards);\n  };\n\n  // Update a specific workout in a specific card\n  const updateWorkout = (cardIndex, workoutIndex, field, value) => {\n    const updatedCards = [...cards];\n    updatedCards[cardIndex][workoutIndex][field] = value;\n    setCards(updatedCards);\n  };\n\n  // Toggle workout completion without adding a duplicate\n  const toggleWorkoutDone = (cardIndex, workoutIndex) => {\n    const updatedCards = [...cards];\n    updatedCards[cardIndex][workoutIndex].done = !updatedCards[cardIndex][workoutIndex].done;\n    setCards(updatedCards);\n    if (updatedCards[cardIndex][workoutIndex].done) {\n      startRestTimer();\n    }\n  };\n\n  // Start the rest timer\n  const startRestTimer = () => {\n    setTimer(restTime * 60); // Convert minutes to seconds\n  };\n\n  // Countdown effect for the rest timer\n  useEffect(() => {\n    if (timer === null || timer <= 0) return;\n    const interval = setInterval(() => {\n      setTimer(prevTimer => prevTimer > 0 ? prevTimer - 1 : 0);\n    }, 1000);\n    return () => clearInterval(interval); // Cleanup on unmount\n  }, [timer]);\n\n  // Save the circuit name automatically when editing ends\n  const handleNameBlur = () => {\n    if (circuitName.trim() === \"\") {\n      setCircuitName(\"name\"); // Default back to \"name\" only on blur if input is empty\n    }\n    setIsEditingName(false);\n  };\n\n  // Save the circuit when the user finishes adding workouts\n  const saveCircuit = async () => {\n    const newCircuit = {\n      name: circuitName || \"name\",\n      cards,\n      restTime\n    };\n\n    // Post to backend\n    try {\n      const response = await fetch(\"http://localhost:5000/api/circuits\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          userId,\n          circuit: newCircuit\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        alert(\"Circuit saved successfully!\");\n        setCircuitName(\"\");\n        setCards([]);\n      } else {\n        alert(data.message || \"Error saving circuit\");\n      }\n    } catch (error) {\n      console.error(\"Error saving circuit:\", error);\n    }\n  };\n\n  // Format time for display (MM:SS)\n  const formatTime = seconds => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs < 10 ? \"0\" : \"\"}${secs}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"centered-content\",\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: `dark-mode-toggle ${darkMode ? \"active\" : \"\"}`,\n      onClick: toggleDarkMode,\n      children: \"\\uD83C\\uDF19\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      onClick: () => setIsEditingName(true),\n      style: {\n        cursor: \"pointer\",\n        marginBottom: \"10px\",\n        color: circuitName ? darkMode ? \"white\" : \"#333\" : \"#aaa\"\n      },\n      children: isEditingName ? /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: circuitName,\n        onChange: e => setCircuitName(e.target.value),\n        onBlur: handleNameBlur,\n        autoFocus: true,\n        className: \"circuit-name-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }, this) : circuitName || \"name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timer-section\",\n      children: [\"Rest Timer: \", timer !== null && timer > 0 ? formatTime(timer) : \"Ready\", /*#__PURE__*/_jsxDEV(\"select\", {\n        value: restTime,\n        onChange: e => setRestTime(Number(e.target.value)),\n        children: [1, 2, 3, 4, 5].map(time => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: time,\n          children: [time, \" min\"]\n        }, time, true, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this), cards.map((workouts, cardIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"workout-card\",\n      style: {\n        marginBottom: \"20px\",\n        padding: \"15px\",\n        border: \"1px solid #ddd\",\n        borderRadius: \"10px\",\n        backgroundColor: darkMode ? \"#444\" : \"#f9f9f9\"\n      },\n      children: [workouts.map((workout, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"workout-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Workout Name\",\n          value: workout.name,\n          onChange: e => updateWorkout(cardIndex, index, \"name\", e.target.value),\n          style: {\n            flex: 2\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-label-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            placeholder: \"Reps\",\n            value: workout.reps,\n            onChange: e => updateWorkout(cardIndex, index, \"reps\", e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"field-label\",\n            children: \"Reps\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-label-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            placeholder: \"Weight\",\n            value: workout.weight,\n            onChange: e => updateWorkout(cardIndex, index, \"weight\", e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"field-label\",\n            children: \"Lbs\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => toggleWorkoutDone(cardIndex, index),\n          style: {\n            backgroundColor: workout.done ? \"#28a745\" : \"#ccc\",\n            color: \"white\",\n            border: \"none\",\n            borderRadius: \"8px\",\n            cursor: \"pointer\",\n            width: \"30px\",\n            height: \"30px\",\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            marginLeft: \"10px\"\n          },\n          children: \"\\u2713\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => addWorkoutToCard(cardIndex),\n        style: {\n          marginTop: \"10px\",\n          backgroundColor: \"#007bff\",\n          color: \"white\",\n          border: \"none\",\n          borderRadius: \"8px\",\n          padding: \"5px 10px\",\n          cursor: \"pointer\"\n        },\n        children: \"+ Add Workout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 11\n      }, this)]\n    }, cardIndex, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bottom-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addCard,\n        children: \"Add Card\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: saveCircuit,\n        children: \"Save Circuit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n}\n_s(CircuitForm, \"NkXJR9UAl1tomvvTeI2gOl3IN0o=\");\n_c = CircuitForm;\nexport default CircuitForm;\nvar _c;\n$RefreshReg$(_c, \"CircuitForm\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","CircuitForm","addCircuit","darkMode","toggleDarkMode","_s","circuitName","setCircuitName","cards","setCards","isEditingName","setIsEditingName","restTime","setRestTime","timer","setTimer","userId","localStorage","getItem","fetchCircuits","response","fetch","data","json","ok","circuits","length","lastCircuit","name","console","error","message","addCard","reps","weight","done","addWorkoutToCard","cardIndex","updatedCards","push","updateWorkout","workoutIndex","field","value","toggleWorkoutDone","startRestTimer","interval","setInterval","prevTimer","clearInterval","handleNameBlur","trim","saveCircuit","newCircuit","method","headers","body","JSON","stringify","circuit","alert","formatTime","seconds","mins","Math","floor","secs","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","style","cursor","marginBottom","color","type","onChange","e","target","onBlur","autoFocus","Number","map","time","workouts","padding","border","borderRadius","backgroundColor","workout","index","placeholder","flex","width","height","display","alignItems","justifyContent","marginLeft","marginTop","_c","$RefreshReg$"],"sources":["/Users/jakoobz/Documents/GitHub/RepVault/frontend/src/components/CircuitForm.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nfunction CircuitForm({ addCircuit, darkMode, toggleDarkMode }) {\n  const [circuitName, setCircuitName] = useState(\"\"); // Circuit name\n  const [cards, setCards] = useState([]); // Cards containing workouts\n  const [isEditingName, setIsEditingName] = useState(false); // Editing circuit name state\n  const [restTime, setRestTime] = useState(1); // Rest time in minutes\n  const [timer, setTimer] = useState(null); // Timer for rest countdown\n\n  const userId = localStorage.getItem(\"userId\"); // Logged-in user's ID\n\n  // Fetch circuits on component mount\n  useEffect(() => {\n    const fetchCircuits = async () => {\n      if (!userId) return; // Ensure user is logged in\n      try {\n        const response = await fetch(`http://localhost:5000/api/circuits/${userId}`);\n        const data = await response.json();\n        if (response.ok) {\n          // If there are circuits, load the first one\n          if (data.circuits && data.circuits.length > 0) {\n            const lastCircuit = data.circuits[data.circuits.length - 1];\n            setCircuitName(lastCircuit.name || \"name\");\n            setCards(lastCircuit.cards || []);\n            setRestTime(lastCircuit.restTime || 1);\n          }\n        } else {\n          console.error(data.message || \"Failed to fetch circuits\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching circuits:\", error);\n      }\n    };\n\n    fetchCircuits();\n  }, [userId]);\n\n  // Add a new card with an initial workout\n  const addCard = () => {\n    setCards([...cards, [{ name: \"New Workout\", reps: 10, weight: 50, done: false }]]);\n  };\n\n  // Add a new workout to an existing card\n  const addWorkoutToCard = (cardIndex) => {\n    const updatedCards = [...cards];\n    updatedCards[cardIndex].push({ name: \"New Workout\", reps: 10, weight: 50, done: false });\n    setCards(updatedCards);\n  };\n\n  // Update a specific workout in a specific card\n  const updateWorkout = (cardIndex, workoutIndex, field, value) => {\n    const updatedCards = [...cards];\n    updatedCards[cardIndex][workoutIndex][field] = value;\n    setCards(updatedCards);\n  };\n\n  // Toggle workout completion without adding a duplicate\n  const toggleWorkoutDone = (cardIndex, workoutIndex) => {\n    const updatedCards = [...cards];\n    updatedCards[cardIndex][workoutIndex].done = !updatedCards[cardIndex][workoutIndex].done;\n    setCards(updatedCards);\n    if (updatedCards[cardIndex][workoutIndex].done) {\n      startRestTimer();\n    }\n  };\n\n  // Start the rest timer\n  const startRestTimer = () => {\n    setTimer(restTime * 60); // Convert minutes to seconds\n  };\n\n  // Countdown effect for the rest timer\n  useEffect(() => {\n    if (timer === null || timer <= 0) return;\n\n    const interval = setInterval(() => {\n      setTimer((prevTimer) => (prevTimer > 0 ? prevTimer - 1 : 0));\n    }, 1000);\n\n    return () => clearInterval(interval); // Cleanup on unmount\n  }, [timer]);\n\n  // Save the circuit name automatically when editing ends\n  const handleNameBlur = () => {\n    if (circuitName.trim() === \"\") {\n      setCircuitName(\"name\"); // Default back to \"name\" only on blur if input is empty\n    }\n    setIsEditingName(false);\n  };\n\n  // Save the circuit when the user finishes adding workouts\n  const saveCircuit = async () => {\n    const newCircuit = { name: circuitName || \"name\", cards, restTime };\n\n    // Post to backend\n    try {\n      const response = await fetch(\"http://localhost:5000/api/circuits\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ userId, circuit: newCircuit }),\n      });\n      const data = await response.json();\n      if (response.ok) {\n        alert(\"Circuit saved successfully!\");\n        setCircuitName(\"\");\n        setCards([]);\n      } else {\n        alert(data.message || \"Error saving circuit\");\n      }\n    } catch (error) {\n      console.error(\"Error saving circuit:\", error);\n    }\n  };\n\n  // Format time for display (MM:SS)\n  const formatTime = (seconds) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs < 10 ? \"0\" : \"\"}${secs}`;\n  };\n\n  return (\n    <div className=\"centered-content\">\n      {/* Dark Mode Toggle */}\n      <span\n        className={`dark-mode-toggle ${darkMode ? \"active\" : \"\"}`}\n        onClick={toggleDarkMode}\n      >\n        🌙\n      </span>\n\n      {/* Editable Circuit Name */}\n      <h2\n        onClick={() => setIsEditingName(true)}\n        style={{\n          cursor: \"pointer\",\n          marginBottom: \"10px\",\n          color: circuitName ? (darkMode ? \"white\" : \"#333\") : \"#aaa\",\n        }}\n      >\n        {isEditingName ? (\n          <input\n            type=\"text\"\n            value={circuitName}\n            onChange={(e) => setCircuitName(e.target.value)}\n            onBlur={handleNameBlur}\n            autoFocus\n            className=\"circuit-name-input\"\n          />\n        ) : (\n          circuitName || \"name\"\n        )}\n      </h2>\n\n      {/* Rest Timer */}\n      <div className=\"timer-section\">\n        Rest Timer: {timer !== null && timer > 0 ? formatTime(timer) : \"Ready\"}\n        <select\n          value={restTime}\n          onChange={(e) => setRestTime(Number(e.target.value))}\n        >\n          {[1, 2, 3, 4, 5].map((time) => (\n            <option key={time} value={time}>\n              {time} min\n            </option>\n          ))}\n        </select>\n      </div>\n\n      {/* Workout Cards */}\n      {cards.map((workouts, cardIndex) => (\n        <div\n          key={cardIndex}\n          className=\"workout-card\"\n          style={{\n            marginBottom: \"20px\",\n            padding: \"15px\",\n            border: \"1px solid #ddd\",\n            borderRadius: \"10px\",\n            backgroundColor: darkMode ? \"#444\" : \"#f9f9f9\",\n          }}\n        >\n          {workouts.map((workout, index) => (\n            <div key={index} className=\"workout-item\">\n              <input\n                type=\"text\"\n                placeholder=\"Workout Name\"\n                value={workout.name}\n                onChange={(e) =>\n                  updateWorkout(cardIndex, index, \"name\", e.target.value)\n                }\n                style={{ flex: 2 }}\n              />\n              <div className=\"input-label-group\">\n                <input\n                  type=\"number\"\n                  placeholder=\"Reps\"\n                  value={workout.reps}\n                  onChange={(e) =>\n                    updateWorkout(cardIndex, index, \"reps\", e.target.value)\n                  }\n                />\n                <span className=\"field-label\">Reps</span>\n              </div>\n              <div className=\"input-label-group\">\n                <input\n                  type=\"number\"\n                  placeholder=\"Weight\"\n                  value={workout.weight}\n                  onChange={(e) =>\n                    updateWorkout(cardIndex, index, \"weight\", e.target.value)\n                  }\n                />\n                <span className=\"field-label\">Lbs</span>\n              </div>\n              <button\n                onClick={() => toggleWorkoutDone(cardIndex, index)}\n                style={{\n                  backgroundColor: workout.done ? \"#28a745\" : \"#ccc\",\n                  color: \"white\",\n                  border: \"none\",\n                  borderRadius: \"8px\",\n                  cursor: \"pointer\",\n                  width: \"30px\",\n                  height: \"30px\",\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  justifyContent: \"center\",\n                  marginLeft: \"10px\",\n                }}\n              >\n                ✓\n              </button>\n            </div>\n          ))}\n          <button\n            onClick={() => addWorkoutToCard(cardIndex)}\n            style={{\n              marginTop: \"10px\",\n              backgroundColor: \"#007bff\",\n              color: \"white\",\n              border: \"none\",\n              borderRadius: \"8px\",\n              padding: \"5px 10px\",\n              cursor: \"pointer\",\n            }}\n          >\n            + Add Workout\n          </button>\n        </div>\n      ))}\n\n      {/* Buttons at the Bottom */}\n      <div className=\"bottom-buttons\">\n        <button onClick={addCard}>Add Card</button>\n        <button onClick={saveCircuit}>Save Circuit</button>\n      </div>\n    </div>\n  );\n}\n\nexport default CircuitForm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}